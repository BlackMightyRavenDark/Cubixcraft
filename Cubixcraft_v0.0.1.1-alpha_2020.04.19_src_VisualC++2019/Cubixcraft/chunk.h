/*
 * Чанк - это условный кусок мира.
 * Мир разделён на несколько чанков по [chunkSize,chunkSize,chunkSize] блоков в каждом.
 * Размеры мира должны быть кратны размерам чанка, иначе мы получим краш при генерации мира.
 * В текущей версии, по-умолчанию, значение переменной chunkSize равно 16.
 * Проще говоря, чанк это большой куб, который содержит в себе много блоков (как
 * кубик Рубика). При попадании чанка во frustum, рендерятся все блоки внутри него,
 * вне зависимости от того, попадают ли они в поле видимости (frustum) или нет.
 * Для каждого чанка создаётся отдельный лист, который перекомпилируется каждый раз
 * когда игрок разрушает какой-то блок или ставит новый.
 * Разделение мира на чанки нужно для увеличения скорости рендеринга.
 * Если рендерить каждый блок по-отдельности, то будут жуткие тормоза.
 */
#include <GL/gl.h>

extern int chunkSize;

class WorldRenderer;

class Chunk {
public:
    //[x0,y0,z0] - правая нижняя задняя точка чанка.
    //Эти координаты считаются позицией чанка.
    int x0;
    int y0;
    int z0;
    //[x1,y1,z1] - левая верхняя передняя точка чанка
    int x1;
    int y1;
    int z1;
    //По сути, чанк это большой куб, а значит [x0,y0,z0] и [x1,y1,z1] это два противоположных его угла.

    //Количество блоков в чанке, которые были отрендерены при последней компиляции листа.
    //Нужно для определения общего количества чанков и блоков, попадающих в поле зрения игрока.
    int blocksRendered;

    /*
     * Флаг необходимости перекомпилировать лист.
     * Когда игрок ставит или ломает блок, устанавливается значение TRUE и лист
     * будет перекомпилирован в следующей итерации цикла рендера.
     */
    bool needUpdate;

    //собственно, сам лист
    GLuint glList;

    Chunk(WorldRenderer* worldRenderer, int x0, int y0, int z0, int x1, int y1, int z1);
    ~Chunk();
    int Rebuild();
    int Render();

private:
    WorldRenderer* renderer;
};
