/*
 * Чанк - это условный кусок мира.
 * Мир разделён на несколько чанков по [chunkSize,chunkSize,chunkSize] блоков в каждом.
 * Размеры мира должны быть кратны размерам чанка, иначе мы получим краш при генерации мира 
 * или чанки просто не создадутся и, в результате, нечему будет рендериться.
 * В текущей версии, по-умолчанию, значение переменной chunkSize равно 16.
 * Проще говоря, чанк это большой куб, который содержит в себе много блоков (как
 * кубик Рубика). При попадании чанка во frustum, рендерятся все блоки внутри него,
 * вне зависимости от того, попадают ли они в поле видимости (frustum) или нет.
 * Для каждого чанка создаётся отдельный лист, который перекомпилируется каждый раз
 * когда игрок разрушает какой-то блок или ставит новый.
 * Разделение мира на чанки нужно для увеличения скорости рендеринга.
 * Если рендерить каждый блок по-отдельности, то будут жуткие тормоза.
 */
#include <GL/gl.h>

//размер чанка по X,Y,Z
extern int chunkSize;

//Счётчик общего количества компиляций листов чанков с момента последнего сброса.
//Нужно для определения количества обновлений чанков в секунду.
extern int totalChunkUpdates;

class CBlock;
class CWorldRenderer;

class CChunk {
public:
    //[x0,y0,z0] - координаты правого нижнего заднего блока в чанке.
    //Этот блок считается первым в чанке, а его координаты считаются позицией чанка.
    int x0;
    int y0;
    int z0;
    //[x1,y1,z1] - координаты левого верхнего переднего блока в чанке.
    //Этот блок считается последним в чанке и находится в противоположном углу.
    int x1;
    int y1;
    int z1;

    CChunk(CWorldRenderer* worldRenderer, int x0, int y0, int z0, int x1, int y1, int z1);
    ~CChunk();
    int Rebuild();
    int Render();
    int ExpireThisChunk();
    bool GetIsExpired();
    int GetQuadsRenderedCount();

private:
    //Количество блоков в чанке, которые были отрендерены при последней компиляции листа.
    //Нужно для определения общего количества чанков и блоков, попадающих в поле зрения игрока.
    int blocksRenderedCount;

    //Количество граней блоков в чанке, которые были отрендерены при последней компиляции листа.
    int quadsRenderedCount;

    /*
     * Флаг, определяющий, нужно ли перекомпилировать лист чанка.
     * Когда игрок ставит или ломает блок, устанавливается значение TRUE и лист
     * будет перекомпилирован в следующей итерации цикла рендера.
     */
    bool isExpired;

    GLuint glList;
    CWorldRenderer* renderer;
};
